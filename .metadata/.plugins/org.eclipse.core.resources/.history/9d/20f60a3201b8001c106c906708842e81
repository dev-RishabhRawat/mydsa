package dynamicprogramming;

public class LongestCommonSubSequence {
	
	// finding lcs only using recursion
	public static int lcs(String s1, String s2,int i,int j) {
		if(i == s1.length() || j == s2.length()) {
			return 0;
		}
		char c1 = s1.charAt(i);
		char c2 = s2.charAt(j);
		int ans;
		if(c1 == c2) {
			ans = 1 + lcs(s1,s2,i+1,j+1);
		}else {
			int a1 = lcs(s1,s2,i+1,j);
			int a2 = lcs(s1,s2,i,j+1);
			ans = Math.max(a1, a2);
		}
		return ans;		
	}
	
	// finding lcs only using dp
		public static int lcsDp(String s1, String s2,int i,int j,int[][] dp) {
			if(i == s1.length() || j == s2.length()) {
				return 0;
			}
			char c1 = s1.charAt(i);
			char c2 = s2.charAt(j);
			int ans;
			if(c1 == c2) {
				if(dp[i+1][j+1] == -1) {
					ans = 1 + lcsDp(s1,s2,i+1,j+1,dp);
					dp[i+1][j+1] = ans;
				}else {
					ans = dp[i+1][j+1];
				}
			}else {
				int a1,a2;
				if(dp[i+1][j] == -1) {
					a1= lcsDp(s1,s2,i+1,j,dp);
					dp[i+1][j] = a1;
				}else {
					a1 = dp[i+1][j];
				}
				
				if(dp[i][j+1] == -1) {
					a2 = lcsDp(s1,s2,i,j+1,dp);
					dp[i][j+1] = a2;
				}else {
					a2 = dp[i][j+1];
				}
				
				ans = Math.max(a1, a2);
			}
			return ans;		
		}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s1 = "bedgmc";
		String s2 = "abdfglc";
//		System.out.println(lcs(s1,s2,0,0));
		int[][] dp = new int[s1.length()+1][s2.length()+1];
		for(int i=0;i<s1.length()+1;i++) {
			for(int j=0;j<s2.length()+1;j++) {
				dp[i][j] = -1;
			}
		}
		
		int res = lcsDp(s1,s2,0,0,dp);
		System.out.println(res);
	}

}
